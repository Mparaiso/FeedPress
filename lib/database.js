// Generated by CoffeeScript 1.6.3
/*
 Database service provider
 */

module.exports = (function (container) {
    /* uses feedreader*/

    return container.share('db', function (container) {
        var Article, ArticleSchema, Feed, FeedSchema, mongoose;
        mongoose = require("mongoose");
        mongoose.connect(process.env.MONGODB_EXPRESS, {
            server: {
                keepAlive: 1
            }
        });
        mongoose.connection.on('error', console.error.bind(console, 'mongoose connection error:'));
        /* Schemas*/

        ArticleSchema = new mongoose.Schema({
            title: String,
            description: String,
            summary: String,
            meta: mongoose.Schema.Types.Mixed,
            link: String,
            guid: {type: String, unique: true},
            categories: [String],
            tags: [String],
            pubDate: Date,
            _feed: {
                type: mongoose.Schema.Types.ObjectId,
                ref: "Feed"
            }
        });
        ArticleSchema.statics.findAllAndSortByPubDateDesc = function (callback) {
            return this.find({}, {}, {
                sort: {
                    "pubDate": -1
                }
            }, callback);
        };
        ArticleSchema.statics.findByFeedId = function (id, callback) {
            return Feed.findOne({_id: id}, function (err, feed) {
                if (err) {
                    return callback(err);
                } else if (feed) {
                    Article.find({'meta.xmlurl': feed.xmlurl}, function (err, articles) {
                        return callback.apply(callback, [].slice.call(arguments));
                    });
                }
            });
        }
        ArticleSchema.methods.toString = function () {
            return "[object Article]";
        };

        ArticleSchema.pre("save", function (next) {
            var $ = this;
            if (!$.tags || ($.tags.length <= 0 && ($.tags.categories && $.tags.categories.length > 0))) {
                $.tags = $.categories;
            }
            next();
        });

        ArticleSchema.post("save", function (article) {
            var self = this;
            console.log("post article save article.meta.xmlurl", article.meta.xmlurl);
            Feed.findOne({xmlurl: this.meta.xmlurl}, function (err, feed) {
                if (err) {
                    console.log("post article save", err);
                } else if (feed) {
                    feed._articles.push(article._id);
                    feed.update({title: self.meta.title, _articles: feed._articles}, function (err, feed) {
                        console.log("post article save", err, feed);
                    });
                } else {
                    console.log("post article save, feed not found", feed);
                }
            })
        });

        FeedSchema = new mongoose.Schema({
            xmlurl: {type: String, unique: true},
            title: String,
            _articles: [
                {
                    type: mongoose.Schema.Types.ObjectId,
                    ref: 'Article'
                }
            ]
        });

        FeedSchema.pre("save", function (next) {
            console.log("pre saving a Feed", this);
            next();
        });

        FeedSchema.statics.hasBeenSuscribed = (function (url, callback) {
            return this.find({
                xmlurl: url
            }, function (err, feeds) {
                if (err) {
                    return callback(err);
                } else if (feeds.length > 0) {
                    console.log(feeds);
                    return callback(err, true);
                } else {
                    return callback(err, false);
                }
            });
        });
        FeedSchema.methods.toString = function () {
            return "[object Feed]";
        };

        /**
         * Create articles from a feed
         * @param {string}url
         * @param {Function} callback
         * @returns {*}
         */
        FeedSchema.statics.createArticlesFromFeed = function (url, callback) {
            return container['feedparser'].parse(url).on('complete',function (meta, articles) {
                    Article.find({}, 'guid', function (err, _articles) {
                        if (err)return callback(err);
                        var guids = _articles.map(function (article) {
                            return article.guid;
                        });
                        articles = articles.filter(function (article) {
                            return guids.indexOf(article.guid) < 0;
                        });
                        return Article.create(articles, function (err) {
                            if (err) {
                                return callback(err)
                            } else {
                                return callback.apply(callback, [].slice.call(arguments));
                            }
                        });
                    });
                }
            ).on("error", function (err) {
                    return callback(err)
                }
            );
        };
        /**
         * suscribe ( or not ) a feed ,then created articles from that feed
         * @param {string} url
         * @param {Function} callback
         * @returns {*}
         */
        FeedSchema.statics.suscribe = function (url, callback) {
            if(!Feed.matchUrl(url))return callback(url+" is not a valid url");
            return Feed.hasBeenSuscribed(url, function (err, suscribed) {
                if (err) {
                    return callback(err)
                } else if (suscribed == true) {
                    return Feed.createArticlesFromFeed(url, callback)
                } else {
                    new Feed({xmlurl: url, _articles: []}).save(function (err, feed) {
                        if (err) {
                            return callback(err)
                        } else {
                            return Feed.createArticlesFromFeed(url, callback)
                        }
                    });
                }
            })
        }

        FeedSchema.statics.matchUrl = function (url) {
            return url.match(/^(http|https)\:\/\/\w+\.\w+/);
        };

        /* Models*/

        Article = mongoose.model("Article", ArticleSchema);
        /* reprÃ©sente une URL de feed*/
        Feed = mongoose.model('Feed', FeedSchema);

        return {
            mongoose: mongoose,
            Feed: Feed,
            Article: Article,
            FeedSchema: FeedSchema,
            ArticleSchema: ArticleSchema
        };
    });
});

/*
 //@ sourceMappingURL=database.map
 */
