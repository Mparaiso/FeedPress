// Generated by CoffeeScript 1.6.3
/*
    Module dependencies.
*/

var Config, Pimple, app, articles, consolidate, express, feeds, http, path, server, swig, _;

_ = require("lodash");

express = require('express');

feeds = require('./routes/feeds');

articles = require('./routes/articles');

Pimple = require('pimple');

Config = require('./lib/config');

http = require('http');

path = require('path');

app = express();

app.map = function(routes, prefix) {
  var route, value;
  prefix = prefix || "";
  for (route in routes) {
    value = routes[route];
    switch (typeof value) {
      case "object":
        this.map(value, prefix + route);
        break;
      case "function":
        app[route](prefix, value);
    }
  }
};

app.set('port', process.env.PORT || 3000);

app.set('views', __dirname + '/views');

/* Configuration du conteneur d'injection de d√©pendance*/


app.DI = new Pimple;

app.DI.register(Config);

/*
    SWIG TEMPLATING ENGINE ( TWIG  )
*/


consolidate = require("consolidate");

swig = require('swig');

app.engine('.twig', consolidate.swig);

app.set('view engine', 'html');

swig.init({
  root: __dirname + "/views/",
  allowErrors: true,
  extensions: {
    "_": _
  },
  filters: {
    substring: function(input, start, length) {
      var result;
      result = "";
      if (typeof input === "string") {
        result = "".substring.call(input, start, length);
      }
      return result;
    }
  }
});

app.set('views', __dirname + "/views/");

/*
    MIDDLEWARES
*/


app.use(express.favicon());

app.use(express.logger('dev'));

app.use(express.bodyParser());

app.use(express.methodOverride());

app.use(express.cookieParser('your secret here'));

app.use(express.session());

app.use(app.router);

app.use(require('less-middleware')({
  src: __dirname + '/public'
}));

app.use(express["static"](path.join(__dirname, 'public')));

if ('development' === app.get('env')) {
  app.use(express.errorHandler());
} else {
  app.use(function(err, req, res, next) {
    console.error(err.stack);
    return res.send(500, 'Something went wrong');
  });
}

/*
    LOCALS
*/


/*
    ROUTES
*/


app.map({
  '/': {
    all: feeds.index
  },
  '/feeds': {
    '/byxmlurl/:xmlurl': {
      all: feeds.byXmlUrl
    },
    '/suscribe': {
      post: feeds.suscribe
    },
    '/:id': {
      all: feeds.read
    },
    all: feeds.index
  },
  '/articles': {
    '/:id': {
      all: articles.read
    }
  }
});

/*
    MY MIDDLEWARE
*/


app.use(function(req, res, next) {
  res.set("Cache-Control", "public");
  res.set("X-Powered-By", "Me-Myself-And-I");
  return next();
});

server = http.createServer(app).listen(app.get('port'), function() {
  return console.log('Express server listening on port ' + app.get('port'));
});

app.on("something", (function() {
  return console.log("hi");
}));

/*
//@ sourceMappingURL=app.map
*/
